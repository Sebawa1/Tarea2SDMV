// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: proto/reservas.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ReservaService_EnviarReservas_FullMethodName = "/reservas.ReservaService/EnviarReservas"
)

// ReservaServiceClient is the client API for ReservaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReservaServiceClient interface {
	EnviarReservas(ctx context.Context, in *ReservasRequest, opts ...grpc.CallOption) (*ReservasResponse, error)
}

type reservaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReservaServiceClient(cc grpc.ClientConnInterface) ReservaServiceClient {
	return &reservaServiceClient{cc}
}

func (c *reservaServiceClient) EnviarReservas(ctx context.Context, in *ReservasRequest, opts ...grpc.CallOption) (*ReservasResponse, error) {
	out := new(ReservasResponse)
	err := c.cc.Invoke(ctx, ReservaService_EnviarReservas_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReservaServiceServer is the server API for ReservaService service.
// All implementations must embed UnimplementedReservaServiceServer
// for forward compatibility
type ReservaServiceServer interface {
	EnviarReservas(context.Context, *ReservasRequest) (*ReservasResponse, error)
	mustEmbedUnimplementedReservaServiceServer()
}

// UnimplementedReservaServiceServer must be embedded to have forward compatible implementations.
type UnimplementedReservaServiceServer struct {
}

func (UnimplementedReservaServiceServer) EnviarReservas(context.Context, *ReservasRequest) (*ReservasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnviarReservas not implemented")
}
func (UnimplementedReservaServiceServer) mustEmbedUnimplementedReservaServiceServer() {}

// UnsafeReservaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReservaServiceServer will
// result in compilation errors.
type UnsafeReservaServiceServer interface {
	mustEmbedUnimplementedReservaServiceServer()
}

func RegisterReservaServiceServer(s grpc.ServiceRegistrar, srv ReservaServiceServer) {
	s.RegisterService(&ReservaService_ServiceDesc, srv)
}

func _ReservaService_EnviarReservas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReservasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReservaServiceServer).EnviarReservas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReservaService_EnviarReservas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReservaServiceServer).EnviarReservas(ctx, req.(*ReservasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ReservaService_ServiceDesc is the grpc.ServiceDesc for ReservaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReservaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "reservas.ReservaService",
	HandlerType: (*ReservaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EnviarReservas",
			Handler:    _ReservaService_EnviarReservas_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/reservas.proto",
}

const (
	RegistroService_RegistrarReserva_FullMethodName = "/reservas.RegistroService/RegistrarReserva"
)

// RegistroServiceClient is the client API for RegistroService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RegistroServiceClient interface {
	RegistrarReserva(ctx context.Context, in *ReservaInfo, opts ...grpc.CallOption) (*RegistroResponse, error)
}

type registroServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRegistroServiceClient(cc grpc.ClientConnInterface) RegistroServiceClient {
	return &registroServiceClient{cc}
}

func (c *registroServiceClient) RegistrarReserva(ctx context.Context, in *ReservaInfo, opts ...grpc.CallOption) (*RegistroResponse, error) {
	out := new(RegistroResponse)
	err := c.cc.Invoke(ctx, RegistroService_RegistrarReserva_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegistroServiceServer is the server API for RegistroService service.
// All implementations must embed UnimplementedRegistroServiceServer
// for forward compatibility
type RegistroServiceServer interface {
	RegistrarReserva(context.Context, *ReservaInfo) (*RegistroResponse, error)
	mustEmbedUnimplementedRegistroServiceServer()
}

// UnimplementedRegistroServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRegistroServiceServer struct {
}

func (UnimplementedRegistroServiceServer) RegistrarReserva(context.Context, *ReservaInfo) (*RegistroResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegistrarReserva not implemented")
}
func (UnimplementedRegistroServiceServer) mustEmbedUnimplementedRegistroServiceServer() {}

// UnsafeRegistroServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RegistroServiceServer will
// result in compilation errors.
type UnsafeRegistroServiceServer interface {
	mustEmbedUnimplementedRegistroServiceServer()
}

func RegisterRegistroServiceServer(s grpc.ServiceRegistrar, srv RegistroServiceServer) {
	s.RegisterService(&RegistroService_ServiceDesc, srv)
}

func _RegistroService_RegistrarReserva_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReservaInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistroServiceServer).RegistrarReserva(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegistroService_RegistrarReserva_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistroServiceServer).RegistrarReserva(ctx, req.(*ReservaInfo))
	}
	return interceptor(ctx, in, info, handler)
}

// RegistroService_ServiceDesc is the grpc.ServiceDesc for RegistroService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RegistroService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "reservas.RegistroService",
	HandlerType: (*RegistroServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegistrarReserva",
			Handler:    _RegistroService_RegistrarReserva_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/reservas.proto",
}

const (
	MonitoreoService_RecibirNotificaciones_FullMethodName = "/reservas.MonitoreoService/RecibirNotificaciones"
)

// MonitoreoServiceClient is the client API for MonitoreoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MonitoreoServiceClient interface {
	RecibirNotificaciones(ctx context.Context, opts ...grpc.CallOption) (MonitoreoService_RecibirNotificacionesClient, error)
}

type monitoreoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMonitoreoServiceClient(cc grpc.ClientConnInterface) MonitoreoServiceClient {
	return &monitoreoServiceClient{cc}
}

func (c *monitoreoServiceClient) RecibirNotificaciones(ctx context.Context, opts ...grpc.CallOption) (MonitoreoService_RecibirNotificacionesClient, error) {
	stream, err := c.cc.NewStream(ctx, &MonitoreoService_ServiceDesc.Streams[0], MonitoreoService_RecibirNotificaciones_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &monitoreoServiceRecibirNotificacionesClient{stream}
	return x, nil
}

type MonitoreoService_RecibirNotificacionesClient interface {
	Send(*NotificacionRequest) error
	Recv() (*NotificacionResponse, error)
	grpc.ClientStream
}

type monitoreoServiceRecibirNotificacionesClient struct {
	grpc.ClientStream
}

func (x *monitoreoServiceRecibirNotificacionesClient) Send(m *NotificacionRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *monitoreoServiceRecibirNotificacionesClient) Recv() (*NotificacionResponse, error) {
	m := new(NotificacionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MonitoreoServiceServer is the server API for MonitoreoService service.
// All implementations must embed UnimplementedMonitoreoServiceServer
// for forward compatibility
type MonitoreoServiceServer interface {
	RecibirNotificaciones(MonitoreoService_RecibirNotificacionesServer) error
	mustEmbedUnimplementedMonitoreoServiceServer()
}

// UnimplementedMonitoreoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMonitoreoServiceServer struct {
}

func (UnimplementedMonitoreoServiceServer) RecibirNotificaciones(MonitoreoService_RecibirNotificacionesServer) error {
	return status.Errorf(codes.Unimplemented, "method RecibirNotificaciones not implemented")
}
func (UnimplementedMonitoreoServiceServer) mustEmbedUnimplementedMonitoreoServiceServer() {}

// UnsafeMonitoreoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MonitoreoServiceServer will
// result in compilation errors.
type UnsafeMonitoreoServiceServer interface {
	mustEmbedUnimplementedMonitoreoServiceServer()
}

func RegisterMonitoreoServiceServer(s grpc.ServiceRegistrar, srv MonitoreoServiceServer) {
	s.RegisterService(&MonitoreoService_ServiceDesc, srv)
}

func _MonitoreoService_RecibirNotificaciones_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MonitoreoServiceServer).RecibirNotificaciones(&monitoreoServiceRecibirNotificacionesServer{stream})
}

type MonitoreoService_RecibirNotificacionesServer interface {
	Send(*NotificacionResponse) error
	Recv() (*NotificacionRequest, error)
	grpc.ServerStream
}

type monitoreoServiceRecibirNotificacionesServer struct {
	grpc.ServerStream
}

func (x *monitoreoServiceRecibirNotificacionesServer) Send(m *NotificacionResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *monitoreoServiceRecibirNotificacionesServer) Recv() (*NotificacionRequest, error) {
	m := new(NotificacionRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MonitoreoService_ServiceDesc is the grpc.ServiceDesc for MonitoreoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MonitoreoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "reservas.MonitoreoService",
	HandlerType: (*MonitoreoServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RecibirNotificaciones",
			Handler:       _MonitoreoService_RecibirNotificaciones_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/reservas.proto",
}
