# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import reservas_pb2 as reservas__pb2


class ReservaServiceStub(object):
    """Servicio de Reservas - Cliente envía solicitudes
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.EnviarReservas = channel.unary_unary(
                '/reservas.ReservaService/EnviarReservas',
                request_serializer=reservas__pb2.ReservasRequest.SerializeToString,
                response_deserializer=reservas__pb2.ReservasResponse.FromString,
                )


class ReservaServiceServicer(object):
    """Servicio de Reservas - Cliente envía solicitudes
    """

    def EnviarReservas(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ReservaServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'EnviarReservas': grpc.unary_unary_rpc_method_handler(
                    servicer.EnviarReservas,
                    request_deserializer=reservas__pb2.ReservasRequest.FromString,
                    response_serializer=reservas__pb2.ReservasResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'reservas.ReservaService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ReservaService(object):
    """Servicio de Reservas - Cliente envía solicitudes
    """

    @staticmethod
    def EnviarReservas(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/reservas.ReservaService/EnviarReservas',
            reservas__pb2.ReservasRequest.SerializeToString,
            reservas__pb2.ReservasResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class RegistroServiceStub(object):
    """Servicio de Registro - Reservas envía confirmaciones
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegistrarReserva = channel.unary_unary(
                '/reservas.RegistroService/RegistrarReserva',
                request_serializer=reservas__pb2.ReservaInfo.SerializeToString,
                response_deserializer=reservas__pb2.RegistroResponse.FromString,
                )


class RegistroServiceServicer(object):
    """Servicio de Registro - Reservas envía confirmaciones
    """

    def RegistrarReserva(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RegistroServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegistrarReserva': grpc.unary_unary_rpc_method_handler(
                    servicer.RegistrarReserva,
                    request_deserializer=reservas__pb2.ReservaInfo.FromString,
                    response_serializer=reservas__pb2.RegistroResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'reservas.RegistroService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RegistroService(object):
    """Servicio de Registro - Reservas envía confirmaciones
    """

    @staticmethod
    def RegistrarReserva(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/reservas.RegistroService/RegistrarReserva',
            reservas__pb2.ReservaInfo.SerializeToString,
            reservas__pb2.RegistroResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class MonitoreoServiceStub(object):
    """Servicio de Monitoreo - Cliente recibe notificaciones
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RecibirNotificaciones = channel.stream_stream(
                '/reservas.MonitoreoService/RecibirNotificaciones',
                request_serializer=reservas__pb2.NotificacionRequest.SerializeToString,
                response_deserializer=reservas__pb2.NotificacionResponse.FromString,
                )


class MonitoreoServiceServicer(object):
    """Servicio de Monitoreo - Cliente recibe notificaciones
    """

    def RecibirNotificaciones(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MonitoreoServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RecibirNotificaciones': grpc.stream_stream_rpc_method_handler(
                    servicer.RecibirNotificaciones,
                    request_deserializer=reservas__pb2.NotificacionRequest.FromString,
                    response_serializer=reservas__pb2.NotificacionResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'reservas.MonitoreoService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MonitoreoService(object):
    """Servicio de Monitoreo - Cliente recibe notificaciones
    """

    @staticmethod
    def RecibirNotificaciones(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/reservas.MonitoreoService/RecibirNotificaciones',
            reservas__pb2.NotificacionRequest.SerializeToString,
            reservas__pb2.NotificacionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
